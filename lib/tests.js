(function() {
  var CARRIER, TIMER, TRM, after, append, echo, eventually, log, n, rpr, step, suspend, test, _i, _j,
    __slice = [].slice;

  TRM = require('coffeenode-trm');

  TIMER = require('..');

  log = TRM.log.bind(TRM);

  rpr = TRM.rpr.bind(TRM);

  echo = TRM.echo.bind(TRM);

  suspend = require('coffeenode-suspend');

  step = suspend.step;

  after = suspend.after;

  eventually = process.nextTick;

  test = function() {
    return step(function*(resume) {
      var idx, timer, _i, _results;
      TIMER["new"]();
      TIMER["new"]('helo world');
      timer = TIMER["new"]('simple random timeout');
      _results = [];
      for (idx = _i = 0; _i <= 8; idx = ++_i) {
        _results.push((function(idx) {
          TIMER.start(timer, idx);
          return after(1 + (1 - Math.random() * 2), function() {
            return TIMER.stop(timer, idx);
          });
        })(idx));
      }
      return _results;
    });
  };

  CARRIER = {};

  CARRIER.sync_method = function() {
    var n, x, _i;
    x = 0;
    for (n = _i = 0; _i <= 1000000; n = ++_i) {
      x += 1;
    }
    return null;
  };

  CARRIER.async_method = function(handler) {
    var route;
    route = '../package.json';
    return (require('fs')).readFile(route, function() {
      return handler(null, null);
    });
  };

  append = function() {
    var P;
    P = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return (require('fs')).appendFileSync('/tmp/log.txt', TRM.pen.apply(TRM, P), {
      encoding: 'utf-8'
    });
  };

  process.on('exit', function() {
    append('(title)');
    return append(TIMER.report());
  });

  CARRIER.sync_method = TIMER.sync_instrumentalize('sync_method', CARRIER.sync_method.bind(CARRIER));

  CARRIER.async_method = TIMER.async_instrumentalize('async_method', CARRIER.async_method.bind(CARRIER));

  for (n = _i = 0; _i < 10; n = ++_i) {
    CARRIER.sync_method();
  }

  for (n = _j = 0; _j < 20; n = ++_j) {
    CARRIER.async_method(function(error, result) {});
  }

}).call(this);
/****generated by https://github.com/loveencounterflow/larq****/